from pathlib import Path
import pandas as pd

from utils.ModuleConfig import ModuleConfig
from utils.environments import get_env


mcfg = ModuleConfig(
    module_name='merge',
    config=config,
    config_params=[
        'merge_strategy',
        'keep_all_columns',
        'dask',
        'backed',
        'threads',
        'stride',
        'slots',
        'allow_duplicate_obs',
        'allow_duplicate_vars',
    ],
    mandatory_wildcards=['dataset'],
    dtypes=dict(
        dask=bool,
        backed=bool,
        threads=int,
        allow_duplicate_obs=bool,
        allow_duplicate_vars=bool,
    ),
)
params = mcfg.get_paramspace()


wildcard_constraints:
    dataset=r'[^/]+',

module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *


rule merge:
    input:
        unpack(lambda wildcards: mcfg.get_input_files_per_dataset(dataset=wildcards.dataset))
    output:
        zarr=directory(mcfg.out_dir / f'{params.wildcard_pattern}.zarr'),
    params:
        merge_strategy=lambda wildcards: mcfg.get_from_parameters(wildcards, 'merge_strategy', default='inner'),
        dask=lambda wildcards: mcfg.get_from_parameters(wildcards, 'dask', default=False),
        backed=lambda wildcards: mcfg.get_from_parameters(wildcards, 'backed', default=False),
        stride=lambda wildcards: mcfg.get_from_parameters(wildcards, 'stride', default=500_000),
        slots=lambda wildcards: mcfg.get_from_parameters(wildcards, 'slots', default={}),
        keep_all_columns=lambda wildcards: mcfg.get_from_parameters(wildcards, 'keep_all_columns', default=False),
        allow_duplicate_obs=lambda wildcards: mcfg.get_from_parameters(wildcards, 'allow_duplicate_obs', default=False),
        allow_duplicate_vars=lambda wildcards: mcfg.get_from_parameters(wildcards, 'allow_duplicate_vars', default=False),
    conda:
        get_env(config, 'scanpy', env_dir='envs')
    threads:
        lambda wildcards: max(1, mcfg.get_from_parameters(wildcards, 'threads', default=1))
    resources:
        mem_mb=lambda w, attempt: mcfg.get_resource(profile='cpu',resource_key='mem_mb',attempt=attempt, factor=3),
    script:
        'merge.py'


rule all:
    input:
        mcfg.get_output_files(rules.merge.output)
    default_target: True
    localrule: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            target='all'
        )
    localrule: True
