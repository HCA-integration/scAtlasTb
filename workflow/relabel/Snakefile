from pathlib import Path
import pandas as pd

from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig


mcfg = ModuleConfig(
    module_name='relabel',
    config=config,
    config_params=[
        'rename_columns',
        'new_columns',
        'merge_columns',
        'selective_update',
        'threads',
    ],
)
paramspace = mcfg.get_paramspace()


def relabel_input_files(wildcards):
    input_files = {'anndata': mcfg.get_input_file(**wildcards)}
    
    new_column_config = mcfg.get_from_parameters(wildcards, 'new_columns')
    if isinstance(new_column_config, dict):
        assert 'file' in new_column_config, f'new_columns config must contain a file key for {wildcards}'
        assert 'order' in new_column_config, f'new_columns config must contain a order key for {wildcards}'
        input_files['new_columns'] = new_column_config.get('file')
    
    merge_column_config = mcfg.get_from_parameters(wildcards, 'merge_columns')
    if isinstance(merge_column_config, dict):
        assert 'file' in merge_column_config, f'merge_columns config must contain a file key for {wildcards}'
        input_files['merge_columns'] = merge_column_config.get('file')
    
    selective_update_config = mcfg.get_from_parameters(wildcards, 'selective_update')
    if isinstance(selective_update_config, dict):
        files = {
            value for value in selective_update_config.get('update_map', {}).values()
            if isinstance(value, str)
        }
        input_files['selective_update'] = list(files)

    return input_files


rule relabel:
    input:
        unpack(relabel_input_files)
    output:
        zarr=directory(mcfg.out_dir / f'{paramspace.wildcard_pattern}.zarr'),
    params:
        rename_columns=lambda wildcards: mcfg.get_from_parameters(wildcards, 'rename_columns', default={}),
        mapping_order=lambda wildcards: mcfg.get_from_parameters(wildcards, 'new_columns', default={}).get('order'),
        index_col=lambda wildcards: mcfg.get_from_parameters(wildcards, 'new_columns', default={}).get('index_col'),
        merge_sep=lambda wildcards: mcfg.get_from_parameters(wildcards, 'merge_columns', default={}).get('sep', '-'),
        selective_update=lambda wildcards: mcfg.get_from_parameters(wildcards, 'selective_update', default=None),
    conda:
        get_env(config, 'scanpy', env_dir='envs')
    threads:
        lambda wildcards: mcfg.get_from_parameters(wildcards, 'threads', default=1, as_type=int),
    resources:
        partition=lambda w: mcfg.get_resource(profile='cpu',resource_key='partition'),
        qos=lambda w: mcfg.get_resource(profile='cpu',resource_key='qos'),
        mem_mb=lambda w: mcfg.get_resource(profile='cpu',resource_key='mem_mb'),
    script:
        'script.py'


rule all:
    input:
        mcfg.get_output_files(rules.relabel.output)
    default_target: True
    localrule: True


module common:
    snakefile: "../common/Snakefile"
    config: config


use rule * from common as common_ *


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            module=mcfg.module_name,
            target='all'
        )
    localrule: True
